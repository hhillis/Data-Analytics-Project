tidy_clean_easements_data <- tidy_clean_easements_data |>
mutate(YEAR = as.numeric(YEAR))
# Check column formats
str(tidy_clean_easements_data)
# View summary of ACRES values
summary(tidy_clean_easements_data$ACRES)
# View if there is a pattern to missing ACRES values
missing_acres_data <- filter(tidy_clean_easements_data, is.na(ACRES))
print(missing_acres_data)
# Clean housing_data
# Rename columns to match easements data set
clean_housing_data <- housing_data
clean_housing_data <- clean_housing_data |>
rename(STATE = "State")
clean_housing_data <- clean_housing_data |>
rename(COUNTY = "County")
clean_housing_data <- clean_housing_data |>
rename(FIPS = "FIPS code")
clean_housing_data <- clean_housing_data |>
rename(YEAR = "Year")
clean_housing_data <- clean_housing_data |>
rename(percent_annual_change = "Annual Change (%)")
clean_housing_data <- clean_housing_data |>
rename(HPI_base_1990 = "HPI with 1990 base")
clean_housing_data <- clean_housing_data |>
rename(HPI_base_2000 = "HPI with 2000 base")
# Mutate states to full names instead of postal abbreviations
state_lookup <- data.frame(
abbrev = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"),
name = c("ALABAMA", "ALASKA", "ARIZONA", "ARKANSAS", "CALIFORNIA", "COLORADO", "CONNECTICUT", "DELAWARE", "FLORIDA", "GEORGIA", "HAWAII", "IDAHO", "ILLINOIS", "INDIANA", "IOWA", "KANSAS", "KENTUCKY", "LOUISIANA", "MAINE", "MARYLAND", "MASSACHUSETTS", "MICHIGAN", "MINNESOTA", "MISSISSIPPI", "MISSOURI", "MONTANA", "NEBRASKA", "NEVADA", "NEW HAMPSHIRE", "NEW JERSEY", "NEW MEXICO", "NEW YORK", "NORTH CAROLINA", "NORTH DAKOTA", "OHIO", "OKLAHOMA", "OREGON", "PENNSYLVANIA", "RHODE ISLAND", "SOUTH CAROLINA", "SOUTH DAKOTA", "TENNESSEE", "TEXAS", "UTAH", "VERMONT", "VIRGINIA", "WASHINGTON", "WEST VIRGINIA", "WISCONSIN", "WYOMING")
)
clean_housing_data <- clean_housing_data |>
mutate(STATE = toupper(state_lookup$name[match(clean_housing_data$STATE, state_lookup$abbrev)]))
# Mutate county names to all caps
clean_housing_data <- clean_housing_data |>
mutate(COUNTY = toupper(clean_housing_data$COUNTY))
# Double check that FIPS code and year are the primary key
dups_housing <- clean_housing_data |>
count(FIPS, YEAR) |>
filter(n > 1)
stopifnot(nrow(dups_housing) == 0)
# Change period values to missing values
clean_housing_data <- clean_housing_data |>
mutate(percent_annual_change = na_if(percent_annual_change, ".")) |>
mutate(HPI = na_if(HPI, ".")) |>
mutate(HPI_base_1990 = na_if(HPI_base_1990, ".")) |>
mutate(HPI_base_2000 = na_if(HPI_base_2000, "."))
# Check column formats
str(clean_housing_data)
# Convert columns to numeric
clean_housing_data <- clean_housing_data |>
mutate(FIPS = as.numeric(FIPS)) |>
mutate(YEAR = as.numeric(YEAR)) |>
mutate(percent_annual_change = as.numeric(percent_annual_change)) |>
mutate(HPI = as.numeric(HPI)) |>
mutate(HPI_base_1990 = as.numeric(HPI_base_1990)) |>
mutate(HPI_base_2000 = as.numeric(HPI_base_2000))
# Check column formats
str(clean_housing_data)
# Merge data sets on FIPS code and year
summary(tidy_clean_easements_data$YEAR)
summary(clean_housing_data$YEAR)
merged_data <- dplyr::left_join(clean_housing_data, tidy_clean_easements_data, by = join_by(FIPS, YEAR, STATE, COUNTY))
# Double check that FIPS code and year are still the primary key
dups_merged <- merged_data |>
count(FIPS, YEAR) |>
filter(n > 1)
stopifnot(nrow(dups_merged) == 0)
# View summaries of all variables in merged data
skim(merged_data)
# View what STATE variables are missing
missing_state_data <- filter(merged_data, is.na(STATE))
# Replace NAs in STATE variable with "DISTRICT OF COLUMBIA"
merged_data <- merged_data |>
mutate(STATE = ifelse(is.na(STATE), "DISTRICT OF COLUMBIA", STATE))
# Filter out years before 1986 where we do not have ACRES data
subset_data <- merged_data |>
filter(YEAR >= 1986)
# Transforming variables
# Transform HPI_base_2000 and ACRES variables
subset_data <- subset_data |>
mutate(ACRES_to_be_logged = ACRES + 1) |>
mutate(ln_ACRES = log(ACRES_to_be_logged)) |>
mutate(ln_ACRES = as.numeric(ln_ACRES))
# Calculate the average ACRES for each county
means_county_ACRES_df <- subset_data |>
group_by(FIPS) |>
summarize(Xibar_mean_ACRES_by_county = ifelse(all(is.na(ACRES)), NA, mean(ACRES, na.rm = TRUE)))
subset_data <- merge(subset_data, means_county_ACRES_df, by = "FIPS", all.x = TRUE)
# Calculate the average ln_ACRES for each county
means_county_ln_ACRES_df <- subset_data |>
group_by(FIPS) |>
summarize(Xibar_mean_ln_ACRES_by_county = ifelse(all(is.na(ln_ACRES)), NA, mean(ln_ACRES, na.rm = TRUE)))
subset_data <- merge(subset_data, means_county_ln_ACRES_df, by = "FIPS", all.x = TRUE)
# Calculate the average ACRES for each year
means_year_ACRES_df <- subset_data |>
group_by(YEAR) |>
summarize(Xtbar_mean_ACRES_by_year = mean(ACRES, na.rm = TRUE))
subset_data <- merge(subset_data, means_year_ACRES_df, by = "YEAR", all.x = TRUE)
# Calculate the average ln_ACRES for each year
means_year_ln_ACRES_df <- subset_data |>
group_by(YEAR) |>
summarize(Xtbar_mean_ln_ACRES_by_year = mean(ln_ACRES, na.rm = TRUE))
subset_data <- merge(subset_data, means_year_ln_ACRES_df, by = "YEAR", all.x = TRUE)
# Log HPI_base_2000 observations
subset_data <- subset_data |>
mutate(ln_HPI_base_2000 = log(HPI_base_2000)) |>
mutate(ln_HPI_base_2000 = as.numeric(ln_HPI_base_2000))
# Calculate the average HPI_base_2000 for each county
means_county_HPI_df <- subset_data |>
group_by(FIPS) |>
summarize(Yibar_mean_HPI_base_2000_by_county = ifelse(all(is.na(HPI_base_2000)), NA, mean(HPI_base_2000, na.rm = TRUE)))
subset_data <- merge(subset_data, means_county_HPI_df, by = "FIPS", all.x = TRUE)
# Calculate the average ln_HPI_base_2000 for each county
means_county_ln_HPI_df <- subset_data |>
group_by(FIPS) |>
summarize(Yibar_mean_ln_HPI_base_2000_by_county = ifelse(all(is.na(ln_HPI_base_2000)), NA, mean(ln_HPI_base_2000, na.rm = TRUE)))
subset_data <- merge(subset_data, means_county_ln_HPI_df, by = "FIPS", all.x = TRUE)
# Calculate the average HPI_base_2000 for each year
means_year_HPI_df <- subset_data |>
group_by(YEAR) |>
summarize(Ytbar_mean_HPI_base_2000_by_year = mean(HPI_base_2000, na.rm = TRUE))
subset_data <- merge(subset_data, means_year_HPI_df, by = "YEAR", all.x = TRUE)
# Calculate the average ln_HPI_base_2000 for each year
means_year_ln_HPI_df <- subset_data |>
group_by(YEAR) |>
summarize(Ytbar_mean_ln_HPI_base_2000_by_year = mean(ln_HPI_base_2000, na.rm = TRUE))
subset_data <- merge(subset_data, means_year_ln_HPI_df, by = "YEAR", all.x = TRUE)
# Calculate the demeaned values and transform variable types
subset_data <- subset_data |>
mutate(Yreg = HPI_base_2000 - Yibar_mean_HPI_base_2000_by_county - Ytbar_mean_HPI_base_2000_by_year) |>
mutate(Yreg_ln = ln_HPI_base_2000 - Yibar_mean_ln_HPI_base_2000_by_county - Ytbar_mean_ln_HPI_base_2000_by_year) |>
mutate(Xreg = ACRES - Xibar_mean_ACRES_by_county - Xtbar_mean_ACRES_by_year) |>
mutate(Xreg_ln = ln_ACRES - Xibar_mean_ln_ACRES_by_county - Xtbar_mean_ln_ACRES_by_year)
# Create clean_data data frame
clean_data <- subset_data
# Convert YEAR and FIPS variables to factors to use them as dummy variables in regressions
clean_econo <- clean_data |>
mutate(YEAR = as.factor(YEAR)) |>
mutate(FIPS = as.factor(FIPS))
# Function to extract coefficients, standard errors, and RMSE
get_coef_data <- function(regression, label) {
tidy_result <- tidy(regression)
rmse <- sqrt(mean(resid(regression)^2))
data_frame <- tidy_result %>%
filter(term %in% c("ln_ACRES", "I(ln_ACRES^2)", "I(ln_ACRES^3)", "I(ln_ACRES^4)", "Intercept")) %>%
select(term, estimate) %>%
mutate(regression = label)
data_frame <- bind_rows(data_frame, data_frame %>% filter(term == "(Intercept)") %>% mutate(term = "RMSE", estimate = rmse))
return(data_frame)
}
# First regression
regress_1 <- feols(ln_HPI_base_2000 ~ ln_ACRES, clean_econo)
# Second regression
regress_2 <- feols(ln_HPI_base_2000 ~ ln_ACRES + FIPS + YEAR, clean_econo)
# Third regression
regress_3 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3), clean_econo)
# Fourth regression
regress_4 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3) + I(ln_ACRES^4) + FIPS + YEAR, clean_econo)
# Extract coefficients, standard errors, and RMSE for each regression
coef_data <- bind_rows(
get_coef_data(regress_1, "Base"),
get_coef_data(regress_2, "With TWFE"),
get_coef_data(regress_3, "With Polynomials"),
get_coef_data(regress_4, "With Polynomials and TWFE")
)
# Create a transposed table
regression_table <- coef_data %>%
pivot_longer(cols = c(estimate), names_to = "stat", values_to = "value") %>%
pivot_wider(names_from = regression, values_from = value) %>%
gt()
# Print the transposed table
print(regression_table)
View(coef_data)
# Function to extract coefficients, standard errors, and RMSE
get_coef_data <- function(regression, label) {
tidy_result <- tidy(regression)
rmse <- sqrt(mean(resid(regression)^2))
data_frame <- tidy_result %>%
filter(term %in% c("ln_ACRES", "I(ln_ACRES^2)", "I(ln_ACRES^3)", "I(ln_ACRES^4)", "Intercept")) %>%
select(term, estimate) %>%
mutate(regression = label)
data_frame <- bind_rows(data_frame, data_frame %>% mutate(term = "RMSE", estimate = rmse))
return(data_frame)
}
# First regression
regress_1 <- feols(ln_HPI_base_2000 ~ ln_ACRES, clean_econo)
# Second regression
regress_2 <- feols(ln_HPI_base_2000 ~ ln_ACRES + FIPS + YEAR, clean_econo)
# Third regression
regress_3 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3), clean_econo)
# Fourth regression
regress_4 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3) + I(ln_ACRES^4) + FIPS + YEAR, clean_econo)
# Extract coefficients, standard errors, and RMSE for each regression
coef_data <- bind_rows(
get_coef_data(regress_1, "Base"),
get_coef_data(regress_2, "With TWFE"),
get_coef_data(regress_3, "With Polynomials"),
get_coef_data(regress_4, "With Polynomials and TWFE")
)
# Create a transposed table
regression_table <- coef_data %>%
pivot_longer(cols = c(estimate), names_to = "stat", values_to = "value") %>%
pivot_wider(names_from = regression, values_from = value) %>%
gt()
# Print the transposed table
print(regression_table)
# Function to extract coefficients, standard errors, and RMSE
get_coef_data <- function(regression, label) {
tidy_result <- tidy(regression)
rmse <- sqrt(mean(resid(regression)^2))
data_frame <- tidy_result %>%
filter(term %in% c("ln_ACRES", "I(ln_ACRES^2)", "I(ln_ACRES^3)", "I(ln_ACRES^4)", "Intercept")) %>%
select(term) %>%
mutate(regression = label)
data_frame <- bind_rows(data_frame, data_frame %>% mutate(term = "RMSE", estimate = rmse))
return(data_frame)
}
# First regression
regress_1 <- feols(ln_HPI_base_2000 ~ ln_ACRES, clean_econo)
# Second regression
regress_2 <- feols(ln_HPI_base_2000 ~ ln_ACRES + FIPS + YEAR, clean_econo)
# Third regression
regress_3 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3), clean_econo)
# Fourth regression
regress_4 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3) + I(ln_ACRES^4) + FIPS + YEAR, clean_econo)
# Extract coefficients, standard errors, and RMSE for each regression
coef_data <- bind_rows(
get_coef_data(regress_1, "Base"),
get_coef_data(regress_2, "With TWFE"),
get_coef_data(regress_3, "With Polynomials"),
get_coef_data(regress_4, "With Polynomials and TWFE")
)
# Create a transposed table
regression_table <- coef_data %>%
pivot_longer(cols = c(estimate), names_to = "stat", values_to = "value") %>%
pivot_wider(names_from = regression, values_from = value) %>%
gt()
# Print the transposed table
print(regression_table)
?coef_data
# Function to extract coefficients, standard errors, and RMSE
get_coef_data <- function(regression, label) {
tidy_result <- tidy(regression)
rmse <- sqrt(mean(resid(regression)^2))
data_frame <- tidy_result %>%
filter(term %in% c("ln_ACRES", "I(ln_ACRES^2)", "I(ln_ACRES^3)", "I(ln_ACRES^4)", "Intercept")) %>%
select(term, estimate) %>%
mutate(regression = label)
data_frame <- bind_rows(data_frame, data_frame %>% mutate(term = "RMSE", estimate = rmse))
return(data_frame)
}
# First regression
regress_1 <- feols(ln_HPI_base_2000 ~ ln_ACRES, clean_econo)
# Second regression
regress_2 <- feols(ln_HPI_base_2000 ~ ln_ACRES + FIPS + YEAR, clean_econo)
# Third regression
regress_3 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3), clean_econo)
# Fourth regression
regress_4 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3) + I(ln_ACRES^4) + FIPS + YEAR, clean_econo)
# Extract coefficients, standard errors, and RMSE for each regression
coef_data <- bind_rows(
get_coef_data(regress_1, "Base"),
get_coef_data(regress_2, "With TWFE"),
get_coef_data(regress_3, "With Polynomials"),
get_coef_data(regress_4, "With Polynomials and TWFE")
)
# Create a transposed table
regression_table <- coef_data %>%
pivot_longer(cols = c(estimate), names_to = "stat", values_to = "value") %>%
pivot_wider(names_from = regression, values_from = value) %>%
gt()
# Print the transposed table
print(regression_table)
# First regression: log of ACRES on log of HPI without TWFE
regress_1 <- feols(ln_HPI_base_2000 ~ ln_ACRES, clean_econo)
summary(regress_1)
# Second regression: log of ACRES on log of HPI with county and year TWFE
regress_2 <- feols(ln_HPI_base_2000 ~ ln_ACRES + FIPS + YEAR, clean_econo)
summary(regress_2)
# Third regression: log of ACRES on log of HPI with polynomials but without TWFE
regress_3 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3), clean_econo)
summary(regress_3)
print(regress_3$coeftable)
# Fourth regression:
regress_4 <- feols(ln_HPI_base_2000 ~ ln_ACRES + I(ln_ACRES^2) + I(ln_ACRES^3) + I(ln_ACRES^4) + FIPS + YEAR, clean_econo)
summary(regress_4)
# Table of results
regression_table <- etable(regress_1, regress_2, regress_3, regress_4,
headers = c("Base", "With Polynomials", "With TWFE", "With Polynomials and TWFE"))
print(regression_table)
?etable
regression_table <- etable(regress_1, regress_2, regress_3, regress_4,
drop = "!Intercept" | "!ln_ACRES",
headers = c("Base", "With Polynomials", "With TWFE", "With Polynomials and TWFE"),
title = "TITLE")
regression_table <- esttable(
regress_1, regress_2, regress_3, regress_4,
order = c("Intercept", "ln_ACRES"),
include = c("Intercept", "ln_ACRES")
)
?esttable
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = intercept & ln_ACRES
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = Intercept & ln_ACRES
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = c("Intercept" & "ln_ACRES")
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "Intercept"
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%Intercept" & "%ln_ACRES"
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%Intercept"
)
print(regression_table)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%Intercept",
keep = "%ln_ACRES"
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%Intercept",
keep = "%ln_ACRES$"
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%Intercept" & "%ln_ACRES$"
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = %ln_ACRES$"
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%ln_ACRES$"
)
print(regression_table)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%ln_ACRES"
)
print(regression_table)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%Intercept" & "%ln_ACRES"
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = ("%Intercept" & "%ln_ACRES")
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%Intercept" | "%ln_ACRES"
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = ("%Intercept" | "%ln_ACRES")
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = %ln_ACRES"
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%ln_ACRES"
)
print(regression_table)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keep = "%ln_ACRES",
title = "TITLE"
)
print(regression_table)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "%FIPS",
title = "TITLE"
)
print(regression_table)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "%FIPS",
drop = "%YEAR",
title = "TITLE"
)
?esttable
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "%FIPS" & drop= "%YEAR",
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "%FIPS" & drop = "%YEAR",
regression_table <- esttable(
regress_1, regress_2, regress_3, regress_4,
order = c("Intercept", "ln_ACRES"),
include = c("Intercept", "ln_ACRES"),
drop = "%FIPS" & "%YEAR"  # Corrected syntax
)
regression_table <- esttable(
regress_1, regress_2, regress_3, regress_4,
include = c("Intercept", "ln_ACRES"),
drop = "%FIPS" & "%YEAR"  # Corrected syntax
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "%FIPS" & "%YEAR",
title = "TITLE"
)
regression_table <- esttable(
regress_1, regress_2, regress_3, regress_4,
order = c("Intercept", "ln_ACRES"),
include = c("Intercept", "ln_ACRES"),
title = "TITLE"
)
regression_table <- esttable(
regress_1, regress_2, regress_3, regress_4,
order = c("Intercept", "ln_ACRES"),
title = "TITLE"
)
# Drop unwanted coefficients from the table
unwanted_vars <- c("FIPS", "YEAR")  # Add any other variables you want to exclude
regression_table <- subset(regression_table, select = -matches(unwanted_vars))
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "%FIPS",
title = "TITLE"
)
print(regression_table)
View(regression_table)
?subset
regression_table <- subset(regression_table, select = -"YEAR")
regression_table <- subset(regression_table, select = -matches("YEAR"))
regression_table <- subset(regression_table, select != "YEAR")
?esttab;e
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop(YEAR*, FIPS*),
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop(YEAR* | FIPS*),
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop(YEAR*:FIPS*),
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "YEAR"
title = "TITLE"
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "FIPS",
title = "TITLE"
)
print(regression_table)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = "FIPS",
nobaselevels = TRUE,
title = "TITLE"
)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = c("FIPS", "YEAR"),
title = "TITLE"
)
print(regression_table)
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = c("FIPS", "YEAR"),
headers = c("Base", "With Polynomials", "With TWFE", "With Polynomials and TWFE"),
title = "TITLE"
)
print(regression_table)
# Create table of coefficients
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = c("FIPS", "YEAR"),
headers = c("Base", "With Polynomials", "With TWFE", "With Polynomials and TWFE"),
title = "TITLE"
)
print(regression_table)
?esttable
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
keepFactors = FALSE,
headers = c("Base", "With Polynomials", "With TWFE", "With Polynomials and TWFE")
)
print(regression_table)
# Create table of coefficients
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = c("FIPS", "YEAR"),
headers = c("Base", "With Polynomials", "With TWFE", "With Polynomials and TWFE")
)
print(regression_table)
ggsave("C:/Users/s75j325/OneDrive - Montana State University/Holly - Personal/School Files/ECNS 560 - Advanced Data Analytics in Economics/Final Project Files/Graphs/regressions_table.jpeg", plot = regression_table)
?kable
# Create table of coefficients
regression_table <- esttable(regress_1, regress_2, regress_3, regress_4,
drop = c("FIPS", "YEAR"),
headers = c("Base", "With TWFE", "With Polynomials", "With Polynomials and TWFE")
)
# View and save
print(regression_table)
knitr::opts_chunk$set(echo = TRUE)
include_graphics("Graphs/regressions_table.jpeg")
?include_graphics
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
test <- clean_data |>
group_by(YEAR) |>
mutate(min = min(ACRES)) |>
mutate(max = max(ACRES))
test <- clean_data |>
group_by(YEAR) |>
mutate(min = min(ACRES)) |>
mutate(max = max(ACRES)) |>
mutate(minHPI = min(HPI_base_2000)) |>
mutate(maxHPI = max(HPI_base_2000))
View(test)
test <- clean_data %>%
group_by(YEAR) %>%
summarize(
min_ACRES = min(ACRES),
max_ACRES = max(ACRES),
min_HPI = min(HPI_base_2000),
max_HPI = max(HPI_base_2000)
)
View(test)
test <- clean_data %>%
group_by(YEAR) %>%
summarize(
min_ACRES = min(ACRES, na.rm = TRUE),
max_ACRES = max(ACRES, na.rm = TRUE),
min_HPI = min(HPI_base_2000, na.rm = TRUE),
max_HPI = max(HPI_base_2000, na.rm = TRUE)
)
View(test)
